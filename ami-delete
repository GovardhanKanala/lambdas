# To delete AMI more than one year

```
import os
import boto3
from datetime import datetime, timedelta

# Initialize boto3 client for EC2
ec2_client = boto3.client('ec2')

def get_amis_older_than_one_year():
    # Calculate the date one year ago
    one_year_ago = datetime.now() - timedelta(days=365)

    # Get all AMIs owned by the account
    response = ec2_client.describe_images(Owners=['self'])

    # List to store AMI IDs that are older than one year
    old_amis = []

    for image in response['Images']:
        creation_date = image['CreationDate']
        creation_date_dt = datetime.strptime(creation_date, '%Y-%m-%dT%H:%M:%S.%fZ')
        
        # Check if the AMI is older than one year
        if creation_date_dt < one_year_ago:
            old_amis.append({
                'ImageId': image['ImageId'],
                'CreationDate': creation_date
            })
    
    return old_amis

def delete_ami(ami_id):
    try:
        # Deregister the AMI
        ec2_client.deregister_image(ImageId=ami_id)
        print(f"Successfully deregistered AMI: {ami_id}")
    except Exception as e:
        print(f"Error deregistering AMI {ami_id}: {e}")

def lambda_handler(event, context):
    # Check if the environment variable AMI_DELETE is set to 'true'
    ami_delete = os.getenv('AMI_DELETE', 'false').lower() == 'true'

    # Get the list of AMIs older than one year
    old_amis = get_amis_older_than_one_year()

    if not old_amis:
        print("No AMIs older than one year found.")
        return
    
    print(f"Found {len(old_amis)} AMIs older than one year.")

    # If AMI_DELETE is true, proceed to delete the AMIs
    if ami_delete:
        for ami in old_amis:
            ami_id = ami['ImageId']
            print(f"Deleting AMI: {ami_id} created on {ami['CreationDate']}")
            delete_ami(ami_id)
    else:
        # If AMI_DELETE is false, just print the AMIs
        for ami in old_amis:
            print(f"AMI: {ami['ImageId']}, Creation Date: {ami['CreationDate']}")

```
